y_train <- read.table(file.path(fpath, 'train', y_train_file))
y_train_file = 'y_train.txt'
y_train <- read.table(file.path(fpath, 'train', y_train_file))
X_train <- read.table(file.path(fpath, 'train', x_train_file))
X_train$Label_ind <- y_train$V1
X_merge <- rbind(X_train, X_test)
flst <- read.table(file.path(fpath, 'features.txt'))
tiny_ft <- ft[grep("-std\\(\\)|-mean\\(\\)", ft$V2),]
tiny_ft <- flst[grep("-std\\(\\)|-mean\\(\\)", ft$V2),]
tiny_ft <- flst[grep("-std\\(\\)|-mean\\(\\)", flst$V2),]
X_merge <- X_merge[,c(l_test_ind, tiny_ft$V1)]
al <- read.table(file.path(fpath, 'activity_labels.txt'))
colnames(al) <- c('Ind', 'Label')
X_merge <- merge(al, X_merge, by.x='Ind', by.y = 'Label_ind')
X_merge$Ind <- NULL
colnames(X_merge)<-c("Label", as.character(gsub("\\(\\)", "", tiny_ft$V2)))
write.table(X_merge, file=file.path(fpath, 'tidy.txt'), row.names = FALSE)
subj_train <- read.table(file.path(fpath, 'train','subject_train.txt'))
subj_test <- read.table(file.path(fpath, 'test','subject_test.txt'))
subj <- rbind(subj_train, subj_test)
X_ag <- aggregate(X_merge[,-1], list(c(as.character(X_merge$Label)), c(subj$V1)), FUN = "mean")
colnames(X_ag)[c(1,2)] <- c('Activity', 'Subject')
write.table(X_ag, file=file.path(fpath, 'tidy_agr.txt'), row.names = FALSE)
library(dplyr)
setwd("UCI HAR Dataset")
setwd("~/Documents/Coursera/wk4Project/UCI HAR Dataset")
x_train <- read.table("train/X_train.txt")
y_train <- read.table("train/y_train.txt")
subject_train <- read.table("train/subject_train.txt")
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
xdt <- rbind(x_train, x_test)
ydt <- rbind(y_train, y_test)
subdt <- rbind(subject_train, subject_test)
feat <- read.table("features.txt")
meanstd_feat <- grep(".*mean.*|.*std.*", feat$V2)
xdt <- xdt[, meanstd_feat]
names(xdt) <- feat[meanstd_feat, 2]
act <- read.table("activity_labels.txt")
ydt[, 1] <- act[ydt[, 1], 2]
names(ydt) <- "activity"
names(subdt) <- "subject"
alldt <- cbind(xdt, ydt, subdt)
tidydt <- alldt %>% group_by(subject,activity) %>%
summarise_each(funs(mean))
write.table(tidydt, "tidy_data.txt",row.name=F)
getCleanData <- function(topLevDir="UCI HAR Dataset") {
library(data.table)
testDatFile <- sprintf("%s/test/X_test.txt", topLevDir)
testLabFile <- sprintf("%s/test/y_test.txt", topLevDir)
testSubFile <- sprintf("%s/test/subject_test.txt", topLevDir)
trainDatFile <- sprintf("%s/train/X_train.txt", topLevDir)
trainLabFile <- sprintf("%s/train/y_train.txt", topLevDir)
trainSubFile <- sprintf("%s/train/subject_train.txt", topLevDir)
print("Reading in test data")
testDat <- read.table(testDatFile)
testLab <- read.table(testLabFile)
testSub <- read.table(testSubFile)
print("Reading in training data")
trainDat <- read.table(trainDatFile)
trainLab <- read.table(trainLabFile)
trainSub <- read.table(trainSubFile)
print("Combining data tables")
cRows <- dim(testDat)[1] + dim(trainDat)[1]
cCol <- dim(testDat)[2]
combineDat <- data.frame(matrix(nrow = cRows, ncol = cCol))
combineDat <- data.table(combineDat)
colnames(combineDat) <- colnames(testDat)
for (name in names(combineDat)){
combineDat[[name]] <- c(testDat[[name]], trainDat[[name]])
}
combineLab <- c(testLab$V1, trainLab$V1)
combineSub <- c(testSub$V1, trainSub$V1)
docFile <- sprintf("%s/features.txt", topLevDir)
docDat <- read.table(docFile)
meanIdx <- grep("-mean\\(\\)", docDat$V2)
stdIdx <- grep("-std\\(\\)", docDat$V2)
newIdx <- c(meanIdx, stdIdx)
combineDat <- combineDat[,newIdx, with = FALSE]
labFile <- sprintf("%s/activity_labels.txt", topLevDir)
labDat <- read.table(labFile)
newLabels <- combinedLab
for (ctr in labDat$V1) {
iMatch <- newLabels == ctr
newLabels[iMatch] <- levels(labDat$V2)[ctr]
}
featureFile <- sprintf("%s/features.txt", topLevDir)
features <- read.table(featureFile)
cNames <- as.character(features$V2)
idx <- grepl("\\(.*\\)", cNames)
cNames[idx] <- gsub("\\(", "", cNames[idx])
cNames[idx] <- gsub("\\)", "", cNames[idx])
idx <- grepl(",", cNames)
cNames[idx] <- gsub(",", "", cNames[idx])
idx <- grepl("-", cNames)
cNames[idx] <- gsub("-", "", cNames[idx])
idx <- grepl("^t", cNames)
cNames[idx] <- sub("t", "time", cNames[idx])
idx <- grepl("^f", cNames)
cNames[idx] <- sub("f", "freq", cNames[idx])
colnames(combineDat) <- tolower(cNames[newIdx])
combineDat$activityname <- newLabels
combineDat$subjects <- combineSub
combineDat
}
makeTidier <- function(mergedData){
subjects <- factor(mergedData$subjects)
activities <- factor(mergedData$activityname)
subArr <- as.numeric(subjects)
actArr <- as.character(activities)
subName <- "subject"
actName <- "activities"
nRow <- length(levels(subjects)) * length(levels(activities))
nVar <- dim(mergedData)[2]-2 # without activity and subject
nCol <- 2*(nVar) # col for mean and SD of each var
tidyData <- data.table(matrix(nrow = nRow))
ctr <- 1
for (sub in levels(subjects)) {
for (act in levels(activities)) {
print(ctr)
iMatch <- (actArr == act) & (subArr == sub)
for (name in names(mergedData)[1:nVar]){
meanName <- paste0("mean", name)
tidyData[[meanName]][ctr] <- mean(mergedData[[name]][iMatch], na.rm = TRUE)
sdName <- paste0("sd", name)
tidyData[[sdName]][ctr] <- sd(mergedData[[name]][iMatch], na.rm = TRUE)
tidyData[[subName]][ctr] <- sub
tidyData[[actName]][ctr] <- act
}
ctr <- ctr + 1
}
}
tidyData$V1 <- NULL
tidyData
}
mergedData <- getCleanData()
setwd("~/Documents/Coursera/wk4Project")
mergedData <- getCleanData()
getCleanData <- function(topLevDir="UCI HAR Dataset") {
# read in data set, merge test and train data, and
# name the vars accordingly
# topLevDir -- string for top level directory
#  (directory generated by unzipping file for assignment)
library(data.table)
# per the README.txt file, X contains the data, Y contains the labels,
# and subject contains the subject numbers (who generated the data)
testDatFile <- sprintf("%s/test/X_test.txt", topLevDir)
testLabFile <- sprintf("%s/test/y_test.txt", topLevDir)
testSubFile <- sprintf("%s/test/subject_test.txt", topLevDir)
trainDatFile <- sprintf("%s/train/X_train.txt", topLevDir)
trainLabFile <- sprintf("%s/train/y_train.txt", topLevDir)
trainSubFile <- sprintf("%s/train/subject_train.txt", topLevDir)
# now generate tables for each
print("Reading in test data")
testDat <- read.table(testDatFile)
testLab <- read.table(testLabFile)
testSub <- read.table(testSubFile)
print("Reading in training data")
trainDat <- read.table(trainDatFile)
trainLab <- read.table(trainLabFile)
trainSub <- read.table(trainSubFile)
# concatenate data tables (by variable), labels, and subjects
print("Combining data tables")
cRows <- dim(testDat)[1] + dim(trainDat)[1]
cCol <- dim(testDat)[2]
combineDat <- data.frame(matrix(nrow = cRows, ncol = cCol))
combineDat <- data.table(combineDat)
colnames(combineDat) <- colnames(testDat)
for (name in names(combineDat)){
combineDat[[name]] <- c(testDat[[name]], trainDat[[name]])
}
combineLab <- c(testLab$V1, trainLab$V1)
combineSub <- c(testSub$V1, trainSub$V1)
# documentation file tells us what variables are means and standard
# deviations
docFile <- sprintf("%s/features.txt", topLevDir)
docDat <- read.table(docFile)
meanIdx <- grep("-mean\\(\\)", docDat$V2)
stdIdx <- grep("-std\\(\\)", docDat$V2)
newIdx <- c(meanIdx, stdIdx)
combineDat <- combineDat[,newIdx, with = FALSE]
# label file links activity names with numbers
labFile <- sprintf("%s/activity_labels.txt", topLevDir)
labDat <- read.table(labFile)
# replace label numbers with activity names
newLabels <- combinedLab
for (ctr in labDat$V1) {
iMatch <- newLabels == ctr
newLabels[iMatch] <- levels(labDat$V2)[ctr]
}
# replace column names with names from features
featureFile <- sprintf("%s/features.txt", topLevDir)
features <- read.table(featureFile)
cNames <- as.character(features$V2)
# get rid of punctuation in column names
idx <- grepl("\\(.*\\)", cNames)
cNames[idx] <- gsub("\\(", "", cNames[idx])
cNames[idx] <- gsub("\\)", "", cNames[idx])
idx <- grepl(",", cNames)
cNames[idx] <- gsub(",", "", cNames[idx])
idx <- grepl("-", cNames)
cNames[idx] <- gsub("-", "", cNames[idx])
# replace t and f at beginning of strings
idx <- grepl("^t", cNames)
cNames[idx] <- sub("t", "time", cNames[idx])
idx <- grepl("^f", cNames)
cNames[idx] <- sub("f", "freq", cNames[idx])
# reassign all lower case column names (slide 16, editing text variables)
colnames(combineDat) <- tolower(cNames[newIdx])
# add the activity names
combineDat$activityname <- newLabels
combineDat$subjects <- combineSub
combineDat
}
makeTidier <- function(mergedData){
# tidy up the combined data from getCleanData() even further
# by averaging the measurements for each subject doing the
# same activity (and also finding the spread)
subjects <- factor(mergedData$subjects)
activities <- factor(mergedData$activityname)
subArr <- as.numeric(subjects)
actArr <- as.character(activities)
subName <- "subject"
actName <- "activities"
nRow <- length(levels(subjects)) * length(levels(activities))
nVar <- dim(mergedData)[2]-2 # without activity and subject
nCol <- 2*(nVar) # col for mean and SD of each var
tidyData <- data.table(matrix(nrow = nRow))
ctr <- 1
for (sub in levels(subjects)) {
for (act in levels(activities)) {
print(ctr)
# find common activities for a given subject
iMatch <- (actArr == act) & (subArr == sub)
# now for each variable, find mean and std for these matches
for (name in names(mergedData)[1:nVar]){
meanName <- paste0("mean", name)
tidyData[[meanName]][ctr] <- mean(mergedData[[name]][iMatch], na.rm = TRUE)
sdName <- paste0("sd", name)
tidyData[[sdName]][ctr] <- sd(mergedData[[name]][iMatch], na.rm = TRUE)
tidyData[[subName]][ctr] <- sub
tidyData[[actName]][ctr] <- act
}
ctr <- ctr + 1
}
}
# when I initialized, I created an empty variable that I wanna drop
tidyData$V1 <- NULL
tidyData
}
mergedData <- getCleanData()
tidyData <- makeTidier(mergedData)
getCleanData <- function(topLevDir="UCI HAR Dataset") {
# read in data set, merge test and train data, and
# name the vars accordingly
# topLevDir -- string for top level directory
#  (directory generated by unzipping file for assignment)
library(data.table)
# per the README.txt file, X contains the data, Y contains the labels,
# and subject contains the subject numbers (who generated the data)
testDatFile <- sprintf("%s/test/X_test.txt", topLevDir)
testLabFile <- sprintf("%s/test/y_test.txt", topLevDir)
testSubFile <- sprintf("%s/test/subject_test.txt", topLevDir)
trainDatFile <- sprintf("%s/train/X_train.txt", topLevDir)
trainLabFile <- sprintf("%s/train/y_train.txt", topLevDir)
trainSubFile <- sprintf("%s/train/subject_train.txt", topLevDir)
# now generate tables for each
print("Reading in test data")
testDat <- read.table(testDatFile)
testLab <- read.table(testLabFile)
testSub <- read.table(testSubFile)
print("Reading in training data")
trainDat <- read.table(trainDatFile)
trainLab <- read.table(trainLabFile)
trainSub <- read.table(trainSubFile)
# concatenate data tables (by variable), labels, and subjects
print("Combining data tables")
cRows <- dim(testDat)[1] + dim(trainDat)[1]
cCol <- dim(testDat)[2]
combineDat <- data.frame(matrix(nrow = cRows, ncol = cCol))
combineDat <- data.table(combineDat)
colnames(combineDat) <- colnames(testDat)
for (name in names(combineDat)){
combineDat[[name]] <- c(testDat[[name]], trainDat[[name]])
}
combineLab <- c(testLab$V1, trainLab$V1)
combineSub <- c(testSub$V1, trainSub$V1)
# documentation file tells us what variables are means and standard
# deviations
docFile <- sprintf("%s/features.txt", topLevDir)
docDat <- read.table(docFile)
meanIdx <- grep("-mean\\(\\)", docDat$V2)
stdIdx <- grep("-std\\(\\)", docDat$V2)
newIdx <- c(meanIdx, stdIdx)
combineDat <- combineDat[,newIdx, with = FALSE]
# label file links activity names with numbers
labFile <- sprintf("%s/activity_labels.txt", topLevDir)
labDat <- read.table(labFile)
# replace label numbers with activity names
newLabels <- combinedLab
for (ctr in labDat$V1) {
iMatch <- newLabels == ctr
newLabels[iMatch] <- levels(labDat$V2)[ctr]
}
# replace column names with names from features
featureFile <- sprintf("%s/features.txt", topLevDir)
features <- read.table(featureFile)
cNames <- as.character(features$V2)
# get rid of punctuation in column names
idx <- grepl("\\(.*\\)", cNames)
cNames[idx] <- gsub("\\(", "", cNames[idx])
cNames[idx] <- gsub("\\)", "", cNames[idx])
idx <- grepl(",", cNames)
cNames[idx] <- gsub(",", "", cNames[idx])
idx <- grepl("-", cNames)
cNames[idx] <- gsub("-", "", cNames[idx])
# replace t and f at beginning of strings
idx <- grepl("^t", cNames)
cNames[idx] <- sub("t", "time", cNames[idx])
idx <- grepl("^f", cNames)
cNames[idx] <- sub("f", "freq", cNames[idx])
# reassign all lower case column names (slide 16, editing text variables)
colnames(combineDat) <- tolower(cNames[newIdx])
# add the activity names
combineDat$activityname <- newLabels
combineDat$subjects <- combineSub
combineDat
}
makeTidier <- function(mergedData){
# tidy up the combined data from getCleanData() even further
# by averaging the measurements for each subject doing the
# same activity (and also finding the spread)
subjects <- factor(mergedData$subjects)
activities <- factor(mergedData$activityname)
subArr <- as.numeric(subjects)
actArr <- as.character(activities)
subName <- "subject"
actName <- "activities"
nRow <- length(levels(subjects)) * length(levels(activities))
nVar <- dim(mergedData)[2]-2 # without activity and subject
nCol <- 2*(nVar) # col for mean and SD of each var
tidyData <- data.table(matrix(nrow = nRow))
ctr <- 1
for (sub in levels(subjects)) {
for (act in levels(activities)) {
print(ctr)
# find common activities for a given subject
iMatch <- (actArr == act) & (subArr == sub)
# now for each variable, find mean and std for these matches
for (name in names(mergedData)[1:nVar]){
meanName <- paste0("mean", name)
tidyData[[meanName]][ctr] <- mean(mergedData[[name]][iMatch], na.rm = TRUE)
sdName <- paste0("sd", name)
tidyData[[sdName]][ctr] <- sd(mergedData[[name]][iMatch], na.rm = TRUE)
tidyData[[subName]][ctr] <- sub
tidyData[[actName]][ctr] <- act
}
ctr <- ctr + 1
}
}
# when I initialized, I created an empty variable that I wanna drop
##Run Analysis on Data taken by the Samsung Galaxy S2
# Read the names of the variables from features.txt
features <- read.table("./features.txt")
## Read the train and test datasets
train_set            <- read.table("./train/X_train.txt")
train_label          <- read.table("./train/y_train.txt")
train_subject        <- read.table("./train/subject_train.txt")
names(train_set)     <- features[,2]
setwd("~/Documents/Coursera/wk4Project/UCI HAR Dataset")
##Run Analysis on Data taken by the Samsung Galaxy S2
# Read the names of the variables from features.txt
features <- read.table("./features.txt")
## Read the train and test datasets
train_set            <- read.table("./train/X_train.txt")
train_label          <- read.table("./train/y_train.txt")
train_subject        <- read.table("./train/subject_train.txt")
names(train_set)     <- features[,2]
names(train_label)   <- "Activity"
names(train_subject) <- "Subject"
train_set            <- cbind(train_subject, train_label, train_set)
test_set             <- read.table("./test/X_test.txt")
test_label           <- read.table("./test/y_test.txt")
test_subject         <- read.table("./test/subject_test.txt")
names(test_set)     <- features[,2]
names(test_label)   <- "Activity"
names(test_subject) <- "Subject"
test_set            <- cbind(test_subject, test_label, test_set)
## Merge the Train and Test Data Sets into one data set
data_set            <- rbind(train_set, test_set)
rm(test_label, test_set, test_subject, train_set, train_subject, train_label)
## Select the column names which contains "mean" or "std" on their names
select_columns <- grep("mean\\(\\)|std\\(\\).", names(data_set), value = TRUE)
reduced_set    <- data_set[,c("Subject", "Activity",select_columns)]
## Change the Activity number for the corresponding label
labels <- read.table("./activity_labels.txt")
reduced_set [,"Activity"] <- factor(reduced_set$Activity, labels = labels$V2)
## Name the variables appropiately
names(reduced_set) <- sub ("^t", "time\\.", names(reduced_set))
names(reduced_set) <- sub ("^f", "frequency\\.", names(reduced_set))
names(reduced_set) <- gsub("Body", "Body\\.", names(reduced_set))
names(reduced_set) <- gsub("Gravity", "Gravity\\.", names(reduced_set))
names(reduced_set) <- sub ("Acc", "Accelerometer\\.", names(reduced_set))
names(reduced_set) <- sub ("Gyro", "Gyroscope\\.", names(reduced_set))
names(reduced_set) <- gsub ("-", "", names(reduced_set))
names(reduced_set) <- gsub ("mean\\(\\)", "mean.", names(reduced_set))
names(reduced_set) <- gsub ("std\\(\\)", "std.", names(reduced_set))
names(reduced_set) <- gsub ("Jerk", "Jerk.", names(reduced_set))
names(reduced_set) <- gsub ("Mag", "Magnitude.", names(reduced_set))
## Create a new tidy dataset with the average of each variable for each activity
## and each subject
splitByTwo <- split(reduced_set, list(reduced_set$Activity, as.factor(reduced_set$Subject)))
takeMeans  <- function(x) colMeans(x[,-(1:2)], na.rm = TRUE)
newTidySet <- as.data.frame(t(sapply(splitByTwo, takeMeans)))
write.table(newTidySet, file = "./tidy_set.txt", row.names = TRUE)
library(dplyr)
library(reshape2)
setwd("C:/Users/Mahmoud/Desktop/UCI HAR Dataset")
# Step 1
# Merge the training and test sets to create one data set
subjecttrain<-read.table("C:/Users/Mahmoud/Desktop/UCI HAR Dataset/train/subject_train.txt", header = FALSE)
ytrain<-read.table("C:/Users/Mahmoud/Desktop/UCI HAR Dataset/train/y_train.txt", header = FALSE)
setwd("~/Documents/Coursera/wk4Project/UCI HAR Dataset")
subjecttrain<-read.table("./train/subject_train.txt", header = FALSE)
ytrain<-read.table("./train/y_train.txt", header = FALSE)
trainX<-read.table("./train/X_train.txt", header = FALSE)
train<-cbind(subjecttrain, ytrain, trainX)
subjecttest<-read.table("./test/subject_test.txt", header = FALSE)
ytest<-read.table("./test/y_test.txt", header = FALSE)
testx<-read.table("./test/X_test.txt", header = FALSE)
test<-cbind(subjecttest, ytest, testx)
mydata<-rbind(train, test)
# Step 2
# Extract only the measurements on the mean and standard deviation for each measurement
features<-read.table("C:/Users/Mahmoud/Desktop/UCI HAR Dataset/features.txt", header = FALSE)
features<-read.table(./features.txt", header = FALSE)
features2<-as.character(features[ , 2])
colnames(mydata)<-c("subject", "activity", features2)
features<-read.table("./features.txt", header = FALSE)
features2<-as.character(features[ , 2])
colnames(mydata)<-c("subject", "activity", features2)
extract <- grep(".*mean.*|.*std.*", features[,2])
extract2<-subset(mydata, select = extract)
# Step 3
# Use descriptive activity names to name the activities in the data set
activity1<-read.table("C:/Users/Mahmoud/Desktop/UCI HAR Dataset/activity_labels.txt", header = FALSE)
activity1<-read.table("./activity_labels.txt", header = FALSE)
activities<-as.data.frame(activity1)
colnames(activities)<-c("activity", "activitylabel")
extract2[, 2] = activities[extract2[, 2], 2]
# Step 4
# Appropriately label the data set with descriptive variable names
names(extract2)<-gsub("^t", "time", names(extract2))
names(extract2)<-gsub("^f", "frequency", names(extract2))
names(extract2)<-gsub("Acc", "Accelerometer", names(extract2))
names(extract2)<-gsub("Gyro", "Gyroscope", names(extract2))
names(extract2)<-gsub("Mag", "Magnitude", names(extract2))
names(extract2)<-gsub("BodyBody", "Body", names(extract2))
# Step 5
# Create a second, independent tidy data set with the average of each variable
# for each activity and each subject
mydata.melt<-melt(extract2, id = c("subject", "activity"))
mydata.mean <- dcast(mydata.melt, subject + activity ~ variable, mean)
write.table(mydata.mean, file = "tidydata.txt",row.name=FALSE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, destfile = "data/Samsung.zip")
#unzip(zipfile="data/HousePC.zip")
unzip(zipfile="data/Samsung.zip", exdir="data")
rm(fleURL)
rm(fileURL)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, destfile = "data/Samsung.zip")
#unzip(zipfile="data/HousePC.zip")
unzip(zipfile="data/Samsung.zip", exdir="data")
#Load Feature Names
featuresNames <- read.table("./data/UCI HAR Dataset/features.txt", header=FALSE, sep=" " )
activityLabels <- read.table("./data/UCI HAR Dataset/activity_labels.txt", header=FALSE, sep=" ",col.names = c("activityID", "actvityDescription"), stringsAsFactors = TRUE)
#Load Data
x_test <- read.table("./data/UCI HAR Dataset/test/X_test.txt", header=FALSE)
y_test <- read.delim("./data/UCI HAR Dataset/test/Y_test.txt", header=FALSE, sep = " ")
x_train <- read.table("./data/UCI HAR Dataset/train/X_train.txt", header=FALSE)
y_train <- read.delim("./data/UCI HAR Dataset/train/Y_train.txt", header=FALSE, sep = " ")
#Process: Add labels to X Test and X Train
#downstream impact - duplicated column names - adding an id at end to make sure distinct
names(x_test) <- make.names(paste(featuresNames[,2],"_colid",featuresNames[,1], sep=""))
names(x_train) <- make.names(paste(featuresNames[,2],"_colid",featuresNames[,1], sep=""))
#Process: Merge activity Lables to Y lables to indicate Activity
names(y_test) <- "activityID"
names(y_train) <- "activityID"
y_test <- merge(y_test, activityLabels)
y_train <- merge(y_train, activityLabels)
#Process: Column Bind Y labels with X lables
x_train <- cbind(y_train, x_train)
x_test <- cbind(y_test, x_test)
#Add Column to indicate if Test versus Train
x_train$Set <- "Train"
x_test$Set <- "Test"
#Row bing Test and Train to create a merge set
x_All <- rbind(x_train, x_test)
#Identify all mean and standard deviation
library(dplyr)
x_All_MeanStd <- select(x_All, activityID, Set, actvityDescription, contains("mean"), contains("std"))
#Handle subject
#Train First #Test 2nd
subject_train <- read.table("./data/UCI HAR Dataset/train/subject_train.txt", header=FALSE)
subject_test <- read.table("./data/UCI HAR Dataset/test/subject_test.txt", header=FALSE)
subject_all <- rbind(subject_train, subject_test)
x_All_MeanStd$SubjectId2 <- as.factor(subject_all[,1])
x_All_MeanStd_Avg <- aggregate(x_All_MeanStd[,4:89],by=list("activityDescription" = x_All_MeanStd$actvityDescription,"SubjectID" = x_All_MeanStd$SubjectId2 ), mean)
names(x_All_MeanStd_Avg) <- (sapply(strsplit(names(x_All_MeanStd_Avg), "_colid"), function(x){x[1]}))
write.table(x_All_MeanStd_Avg, file="./data/Assignment2TidyOutput.csv", sep=",", row.names = FALSE)
